@page "/food-item"
@using Cafeteria.Shared
@using Cafeteria.Customer.Components.Pages
@using Cafeteria.Customer.Components.ViewModelInterfaces
@inject IFoodItemBuilderViewModel FoodItemBuilderService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Customize Your Menu Item</PageTitle>

<div class="container">
    @* Show current food builder item using view model *@
    @if (FoodItemBuilderService.SelectedFoodItem != null)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="row g-0">
                        <div class="col-md-4">
                            @if (!string.IsNullOrEmpty(FoodItemBuilderService.SelectedFoodItem.ImageUrl))
                            {
                                <img src="@FoodItemBuilderService.SelectedFoodItem.ImageUrl" class="img-fluid rounded-start h-100" alt="@FoodItemBuilderService.SelectedFoodItem.Name" style="object-fit: cover;" />
                            }
                        </div>
                        <div class="col-md-8">
                            <div class="card-body">
                                <h2 class="card-title">@FoodItemBuilderService.SelectedFoodItem.Name</h2>
                                @if (!string.IsNullOrEmpty(FoodItemBuilderService.SelectedFoodItem.Description))
                                {
                                    <p class="card-text text-muted mb-3">@FoodItemBuilderService.SelectedFoodItem.Description</p>
                                }
                                <h4 class="text-success">Price: $@FoodItemBuilderService.SelectedFoodItem.Price.ToString("F2")</h4>
                                @if (selectedIngredientPrice > 0)
                                {
                                    <small class="text-info">+ $@selectedIngredientPrice.ToString("F2") for additional ingredients</small>
                                    <h5 class="text-primary mt-2">Total: $@((FoodItemBuilderService.SelectedFoodItem.Price + selectedIngredientPrice).ToString("F2"))</h5>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @* Get list of ingredient types for items and show ingredient types as sub-headers *@
        @* Display all available ingredients each under corresponding type; show as checkbox items *@
        @if (FoodItemBuilderService.IngredientsByType.Any())
        {
            <div class="row">
                <div class="col-12">
                    <h3>Choose Your Ingredients</h3>
                    <p class="text-muted mb-4">Choose additional ingredients/toppings for your meal. Selecting more than the included quantity will add extra cost to your meal.</p>
                </div>
            </div>

            @foreach (var ingredientGroup in FoodItemBuilderService.IngredientsByType)
            {
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <h4 class="mb-0">
                                    @ingredientGroup.Key.Name 
                                    <small class="text-muted">(Choose @ingredientGroup.Key.Quantity)</small>
                                    @if (GetSelectedIngredientCountForType(ingredientGroup.Key) > 0)
                                    {
                                        <span class="badge bg-primary ms-2">@GetSelectedIngredientCountForType(ingredientGroup.Key) selected</span>
                                    }
                                </h4>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    @foreach (var ingredient in ingredientGroup.Value)
                                    {
                                        <div class="col-md-6 col-lg-4 mb-3">
                                            <div class="form-check">
                                                <input class="form-check-input" 
                                                       type="checkbox" 
                                                       id="ingredient_@ingredient.Name.Replace(" ", "_")"
                                                       checked="@IsIngredientSelected(ingredient)"
                                                       @onchange="@((e) => HandleIngredientSelection(e, ingredient, ingredientGroup.Key))" />
                                                <label class="form-check-label d-flex align-items-center" for="ingredient_@ingredient.Name.Replace(" ", "_")">
                                                    <div>
                                                        <div class="fw-bold">@ingredient.Name</div>
                                                    </div>
                                                </label>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }

        <div class="row">
            <div class="col-12 text-center">
                    <a href="/place-order" class="btn btn-primary btn-lg w-100">
                        Review and Order
                    </a>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12 text-center">
                <div class="alert alert-warning">
                    <h4>No food item selected</h4>
                    <p>Please select a food item first.</p>
                    <button type="button" class="btn btn-secondary" @onclick="GoBackToMenu">
                        Go Back to Menu
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private decimal selectedIngredientPrice = 0m;

    protected override void OnInitialized()
    {
        // Calculate initial selected ingredient price
        UpdateSelectedIngredientPrice();
    }

    private void UpdateSelectedIngredientPrice()
    {
        selectedIngredientPrice = FoodItemBuilderService.SelectedIngredients.Sum(i => i.Price);
    }

    private bool IsIngredientSelected(Ingredient ingredient)
    {
        return FoodItemBuilderService.SelectedIngredients.Contains(ingredient);
    }

    private int GetSelectedIngredientCountForType(IngredientType ingredientType)
    {
        return FoodItemBuilderService.SelectedIngredients
            .Count(i => i.Type != null && i.Type.Name == ingredientType.Name);
    }

    @* ingredients should warn with popup if you select more than qty of ingredient type *@
    private async Task HandleIngredientSelection(ChangeEventArgs e, Ingredient ingredient, IngredientType ingredientType)
    {
        bool isChecked = (bool)e.Value!;
        
        if (isChecked)
        {
            // Check if adding this ingredient would exceed the limit
            int currentCount = GetSelectedIngredientCountForType(ingredientType);
            if (currentCount >= ingredientType.Quantity)
            {
                // Show warning popup
                await JSRuntime.InvokeVoidAsync("alert", 
                    $"You can only select {ingredientType.Quantity} item(s) from the {ingredientType.Name} category. Please unselect another {ingredientType.Name} item first.");
                return;
            }
            
            FoodItemBuilderService.SelectIngredient(ingredient);
        }
        else
        {
            FoodItemBuilderService.UnselectIngredient(ingredient);
        }
        
        UpdateSelectedIngredientPrice();
        StateHasChanged();
    }

    private void ContinueToOrder()
    {
        // Navigate to order page - you may need to adjust this route based on your routing setup
        Navigation.NavigateTo("/order");
    }

    private void GoBackToMenu()
    {
        Navigation.NavigateTo("/");
    }
}
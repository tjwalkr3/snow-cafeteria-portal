@page "/orders"
@using Cafeteria.Shared

<PageTitle>My Orders</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-12">
            <h2>My Orders</h2>
            <p class="text-muted">View your order history and current orders</p>
        </div>
    </div>

    @if (orders.Any())
    {
        <div class="row">
            @foreach (var order in orders)
            {
                <div class="col-lg-6 col-xl-4 mb-4">
                    <div class="card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">Order #@order.Id</h6>
                            <span class="badge @GetStatusBadgeClass(order.Status)">@order.Status</span>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <small class="text-muted">Customer:</small>
                                <div class="fw-semibold">@order.CustomerName</div>
                                @if (!string.IsNullOrEmpty(order.CustomerEmail))
                                {
                                    <small class="text-muted">@order.CustomerEmail</small>
                                }
                            </div>

                            <div class="mb-3">
                                <small class="text-muted">Order Date:</small>
                                <div>@order.OrderDate.ToString("MMM dd, yyyy HH:mm")</div>
                            </div>

                            <div class="mb-3">
                                <small class="text-muted">Items:</small>
                                @foreach (var item in order.Items)
                                {
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <div>
                                            <small>@item.FoodItem.Name</small>
                                            <span class="text-muted">x@item.Quantity</span>
                                        </div>
                                        <small class="text-success">$@item.TotalPrice.ToString("F2")</small>
                                    </div>
                                }
                            </div>

                            @if (!string.IsNullOrEmpty(order.Notes))
                            {
                                <div class="mb-3">
                                    <small class="text-muted">Notes:</small>
                                    <div class="small">@order.Notes</div>
                                </div>
                            }
                        </div>
                        <div class="card-footer">
                            <div class="d-flex justify-content-between align-items-center">
                                <strong>Total: $@order.TotalAmount.ToString("F2")</strong>
                                @if (order.Status == OrderStatus.Pending)
                                {
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => CancelOrder(order.Id)">
                                        Cancel
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12 text-center">
                <div class="alert alert-info">
                    <h4>No orders found</h4>
                    <p>You haven't placed any orders yet. <a href="/food-item">Browse our food items</a> to get started!</p>
                </div>
            </div>
        </div>
    }
</div>

@if (!string.IsNullOrEmpty(message))
{
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div class="toast show" role="alert">
            <div class="toast-header">
                <strong class="me-auto">Order Update</strong>
                <button type="button" class="btn-close" @onclick="() => message = string.Empty"></button>
            </div>
            <div class="toast-body">
                @message
            </div>
        </div>
    </div>
}

@code {
    private List<Order> orders = new();
    private OrderService orderService = new();
    private string message = string.Empty;

    protected override void OnInitialized()
    {
        // Load sample orders for demonstration
        orders = orderService.GetSampleOrders().ToList();
    }

    private string GetStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "bg-warning text-dark",
            OrderStatus.Confirmed => "bg-info text-white",
            OrderStatus.Preparing => "bg-primary text-white",
            OrderStatus.Ready => "bg-success text-white",
            OrderStatus.Completed => "bg-secondary text-white",
            OrderStatus.Cancelled => "bg-danger text-white",
            _ => "bg-light text-dark"
        };
    }

    private void CancelOrder(int orderId)
    {
        try
        {
            orderService.CancelOrder(orderId);
            orders = orderService.GetAllOrders().ToList();
            message = $"Order #{orderId} has been cancelled.";
        }
        catch (Exception ex)
        {
            message = $"Error cancelling order: {ex.Message}";
        }
    }
}